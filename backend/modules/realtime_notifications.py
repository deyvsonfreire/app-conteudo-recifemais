"""
M√≥dulo para notifica√ß√µes em tempo real usando Supabase Realtime
Vers√£o simplificada para produ√ß√£o
"""

import asyncio
import json
import logging
from typing import Dict, Any, Callable, Optional
from datetime import datetime

logger = logging.getLogger(__name__)

class RealtimeNotificationManager:
    """Gerenciador de notifica√ß√µes em tempo real - Vers√£o simplificada"""
    
    def __init__(self):
        self.subscribers: Dict[str, Callable] = {}
        self.is_connected = False
        self.notifications_log = []
        
    async def connect(self):
        """Conecta ao sistema de notifica√ß√µes (vers√£o simplificada)"""
        try:
            # Por enquanto, usar sistema de notifica√ß√µes local
            # Em vers√µes futuras, implementar Realtime quando supabase-py suportar async
            self.is_connected = True
            logger.info("‚úÖ Sistema de notifica√ß√µes ativo (modo local)")
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao conectar notifica√ß√µes: {e}")
            self.is_connected = False
    
    def _broadcast_notification(self, event_type: str, notification: Dict[str, Any]):
        """Envia notifica√ß√£o para todos os subscribers"""
        # Salvar no log local
        self.notifications_log.append({
            'event_type': event_type,
            'notification': notification,
            'timestamp': datetime.now().isoformat()
        })
        
        # Manter apenas √∫ltimas 100 notifica√ß√µes
        if len(self.notifications_log) > 100:
            self.notifications_log = self.notifications_log[-100:]
        
        # Enviar para subscribers
        for subscriber_id, callback in self.subscribers.items():
            try:
                callback(event_type, notification)
            except Exception as e:
                logger.error(f"Erro ao enviar notifica√ß√£o para {subscriber_id}: {e}")
    
    def subscribe(self, subscriber_id: str, callback: Callable):
        """Registra um subscriber para receber notifica√ß√µes"""
        self.subscribers[subscriber_id] = callback
        logger.info(f"üì° Subscriber registrado: {subscriber_id}")
    
    def unsubscribe(self, subscriber_id: str):
        """Remove um subscriber"""
        if subscriber_id in self.subscribers:
            del self.subscribers[subscriber_id]
            logger.info(f"üì° Subscriber removido: {subscriber_id}")
    
    async def send_custom_notification(self, notification_type: str, data: Dict[str, Any]):
        """Envia notifica√ß√£o customizada"""
        try:
            notification_data = {
                'type': notification_type,
                'data': data,
                'created_at': datetime.now().isoformat()
            }
            
            # Broadcast para subscribers
            self._broadcast_notification(notification_type, notification_data)
            
            logger.info(f"üì¢ Notifica√ß√£o enviada: {notification_type}")
            
        except Exception as e:
            logger.error(f"Erro ao enviar notifica√ß√£o customizada: {e}")
    
    async def get_system_stats(self) -> Dict[str, Any]:
        """Retorna estat√≠sticas do sistema"""
        try:
            stats = {
                'realtime_connected': self.is_connected,
                'active_subscribers': len(self.subscribers),
                'total_notifications': len(self.notifications_log),
                'recent_notifications': self.notifications_log[-5:] if self.notifications_log else [],
                'timestamp': datetime.now().isoformat()
            }
            
            return stats
            
        except Exception as e:
            logger.error(f"Erro ao obter estat√≠sticas: {e}")
            return {
                'realtime_connected': self.is_connected,
                'active_subscribers': len(self.subscribers),
                'error': str(e)
            }
    
    async def disconnect(self):
        """Desconecta do sistema de notifica√ß√µes"""
        try:
            self.is_connected = False
            self.subscribers.clear()
            
            logger.info("üîå Sistema de notifica√ß√µes desconectado")
            
        except Exception as e:
            logger.error(f"Erro ao desconectar: {e}")

# Inst√¢ncia global
realtime_manager = RealtimeNotificationManager() 